<?php

/**
 * Implements hook_menu
 *
 * @author JaceRider
 */
function exo_asset_menu(){
  // Needed to prevent path errors
  // $items['exo/assets'] = array(
  //   'page callback' => 'exo_asset_browser',
  //   'access callback' => FALSE,
  //   'type' => MENU_CALLBACK
  // );
  // $items['exo/asset'] = array(
  //   'page callback' => 'exo_asset_browser',
  //   'access callback' => FALSE,
  //   'type' => MENU_CALLBACK
  // );
  // Add menu items to add each different type of entity.
  foreach (asset_get_types() as $type) {
    // $asset = asset_create(array('type' => $type->type));
    $items['exo/asset/add/' . $type->type] = array(
      'title' => 'Add ' . $type->label,
      'page callback' => 'exo_asset_form_wrapper',
      'page arguments' => array($type->type),
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => 'asset_access',
      'access arguments' => array('edit', $type),
      'file' => 'exo_asset.page.inc',
      'file path' => drupal_get_path('module', 'exo_asset'),
      'type' => MENU_CALLBACK
    );
    $items['exo/assets/' . $type->type] = array(
      'page callback' => 'exo_asset_browser',
      'page arguments' => array($type->type,'all'),
      'access callback' => 'asset_access',
      'access arguments' => array('view', $type),
      'theme callback' => 'ajax_base_page_theme',
      'file' => 'exo_asset.page.inc',
      'type' => MENU_CALLBACK
    );
    $items['exo/assets/' . $type->type . '/%/%'] = array(
      'page callback' => 'exo_asset_browser',
      'page arguments' => array($type->type,3,4),
      'access callback' => 'asset_access',
      'access arguments' => array('view', $type),
      'theme callback' => 'ajax_base_page_theme',
      'file' => 'exo_asset.page.inc',
      'type' => MENU_CALLBACK
    );
  }
  $items['exo/asset/%asset'] = array(
    'title' => 'View',
    'page callback' => 'exo_asset_page_view',
    'page arguments' => array(2),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('view', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );
  $items['exo/asset/%asset/view/0'] = array(
    'title' => 'View',
    'page callback' => 'exo_asset_page_view',
    'page arguments' => array(2, 4),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('view', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );
  $items['exo/asset/%asset/view/%asset_instance'] = array(
    'title' => 'View',
    'page callback' => 'exo_asset_page_view',
    'page arguments' => array(2, 4),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('view', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );
  $items['exo/asset/%asset/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'exo_asset_form_wrapper',
    'page arguments' => array(2),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('edit', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );
  $items['exo/asset/%asset/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'exo_asset_delete',
    'page arguments' => array(2),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('edit', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );
  $items['exo/asset/%asset/instance/0'] = array(
    'title' => 'Instance Settings',
    'page callback' => 'exo_asset_instance_form_wrapper',
    'page arguments' => array(2,4),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('edit', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );
  $items['exo/asset/%asset/instance/%asset_instance'] = array(
    'title' => 'Instance Settings',
    'page callback' => 'exo_asset_instance_form_wrapper',
    'page arguments' => array(2,4),
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => 'asset_access',
    'access arguments' => array('edit', 2),
    'file' => 'exo_asset.page.inc',
    'file path' => drupal_get_path('module', 'exo_asset'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function exo_asset_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'exo_asset') . '/views',
  );
}


/**
* Implements hook_ctools_plugin_directory().
*/
function exo_asset_ctools_plugin_directory($module, $plugin) {
  if ($module == 'asset_instance') {
    return 'plugins/' . $plugin;
  }
}

/**
* Implements hook_ctools_plugin_type().
*
* Has plenty options. See ctools/help/plugins-creating.html
*/
// function exo_asset_instance_ctools_plugin_type() {
//   $plugins = array(
//     'instance' => array(
//       'classes' => array('class'),
//     ),
//   );
//   return $plugins;
// }

/**
 * Implements hook_field_formatter_view().
 *
 * When a field that exo can act on is loaded, replace all the tokens with
 * assets.
 */
function exo_asset_preprocess_field(&$vars) {
  if(in_array($vars['element']['#field_type'], exo_allowed_field_types())){
    foreach($vars['items'] as &$data){
      //exo_asset_field_storage_set($vars['element']['#entity_type'], $vars['element']['#field_name'], $vars['element']['#bundle']);
      $data['#markup'] = asset_instance_token_replace($data['#markup']);
    }
  }
}

/**
 * Expose Field API formatter types.
 *
 * Formatters handle the display of field values. Formatter hooks are typically
 * called by the Field Attach API field_attach_prepare_view() and
 * field_attach_view() functions.
 *
 * @return
 *   An array describing the formatter types implemented by the module.
 *   The keys are formatter type names. To avoid name clashes, formatter type
 *   names should be prefixed with the name of the module that exposes them.
 *   The values are arrays describing the formatter type, with the following
 *   key/value pairs:
 *   - label: The human-readable name of the formatter type.
 *   - description: A short description for the formatter type.
 *   - field types: An array of field types the formatter supports.
 *   - settings: An array whose keys are the names of the settings available
 *     for the formatter type, and whose values are the default values for
 *     those settings.
 *
 * @see hook_field_formatter_info_alter()
 * @see hook_field_formatter_view()
 * @see hook_field_formatter_prepare_view()
 */
function exo_asset_field_formatter_info() {
  return array(
    'text_exo_asset' => array(
      'label' => t('With Assets'),
      'field types' => exo_allowed_field_types(),
    ),
    'text_exo_asset_trimmed' => array(
      'label' => t('With Assets Trimmed'),
      'field types' => exo_allowed_field_types(),
      'settings' => array('trim_length' => 600,'strip_tags' => 0,'preserve_tags' => '','ending' => '...','exact' => 0,'html' => 1),
    ),
    'text_exo_asset_remove' => array(
      'label' => t('Without Assets'),
      'field types' => exo_allowed_field_types(),
    ),
    'text_exo_asset_remove_trimmed' => array(
      'label' => t('Without Assets Trimmed'),
      'field types' => exo_allowed_field_types(),
      'settings' => array('trim_length' => 600,'strip_tags' => 0,'preserve_tags' => '','ending' => '...','exact' => 0,'html' => 1),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function exo_asset_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $element['trim_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
    );
    $element['strip_tags'] = array(
      '#title' => t('Strip HTML tags'),
      '#type' => 'checkbox',
      '#default_value' => $settings['strip_tags'],
      '#description' => t('If checked, all HTML tags will be stripped.'),
    );
    $element['preserve_tags'] = array(
      '#title' => t('Preserve certain tags '),
      '#type' => 'textfield',
      '#size' => 30,
      '#default_value' => $settings['preserve_tags'],
      '#description' => t('List the tags that need to be preserved during the stripping process. example &quot;&lt;p&gt; &lt;br&gt;&quot; which will preserve all p and br elements'),
      '#states' => array(
        'visible' => array(// action to take.
          ':input[name="fields['.$field['field_name'].'][settings_edit_form][settings][strip_tags]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $element['ending'] = array(
      '#title' => t('Ending'),
      '#type' => 'textfield',
      '#size' => 40,
      '#default_value' => $settings['ending'],
    );
    $element['exact'] = array(
      '#title' => t('Ignore word boundary and trim to exact length'),
      '#type' => 'checkbox',
      '#default_value' => $settings['exact'],
    );
    $element['html'] = array(
      '#title' => t('Handle HTML tags and trim text accordingly'),
      '#type' => 'checkbox',
      '#default_value' => $settings['html'],
    );

    // if(module_exists('views')){
    //   $element['word_boundary'] = array(
    //     '#title' => t('Trim only on a word boundary.'),
    //     '#type' => 'checkbox',
    //     '#default_value' => $settings['word_boundary'],
    //   );
    //   $element['ellipsis'] = array(
    //     '#title' => t('Show an ellipsis (...) at the end of the trimmed string.'),
    //     '#type' => 'checkbox',
    //     '#default_value' => $settings['ellipsis'],
    //   );
    //   $element['html'] = array(
    //     '#title' => t('Make sure that the HTML is correct.'),
    //     '#type' => 'checkbox',
    //     '#default_value' => $settings['html'],
    //   );
    // }
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function exo_asset_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $summary = t('Trim length') . ': ' . $settings['trim_length'];
    if(!empty($settings['strip_tags'])){
      $summary .= '<br />' . t('Strip Tags');
      if($settings['preserve_tags']){
        $summary .= ' except "' . htmlentities($settings['preserve_tags']) . '"';
      }
    }
    if(!empty($settings['ending'])) $summary .= '<br />' . t('Ending') . ':' . $settings['ending'];
    if(!empty($settings['exact'])) $summary .= '<br />' . t('Exact');
    if(!empty($settings['html'])) $summary .= '<br />' . t('Handle HTML');
  }

  return $summary;
}

/**
* Implements hook_field_formatter_view().
*/
function exo_asset_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'text_exo_asset':
    case 'text_exo_asset_trimmed':
      foreach ($items as $delta => $item) {
        $output = _text_sanitize($instance, $langcode, $item, 'value');
        $output = asset_instance_token_replace($output);
        if (strpos($display['type'], '_trimmed') !== FALSE) {
          $output = exo_asset_field_formatter_view_trim($output, $instance, $item, $display);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
    case 'text_exo_asset_remove':
    case 'text_exo_asset_remove_trimmed':
      foreach ($items as $delta => $item) {
        $output = _text_sanitize($instance, $langcode, $item, 'value');
        $output = asset_instance_token_remove($output);
        // dsm($output);
        if (strpos($display['type'], '_trimmed') !== FALSE) {
          $output = exo_asset_field_formatter_view_trim($output, $instance, $item, $display);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }
  return $element;
}

/**
 * Trim text
 */
function exo_asset_field_formatter_view_trim($output, $instance, $item, $display){
  if (!empty($display['settings']['strip_tags'])) {
    $output = strip_tags($output, $display['settings']['preserve_tags']);
  }
  return truncateHtml($output, $display['settings']['trim_length'], $display['settings']['ending'], $display['settings']['exact'], $display['settings']['html']);
}

/**
 * truncateHtml can truncate a string up to a number of characters while preserving whole words and HTML tags
 *
 * @param string $text String to truncate.
 * @param integer $length Length of returned string, including ellipsis.
 * @param string $ending Ending to be appended to the trimmed string.
 * @param boolean $exact If false, $text will not be cut mid-word
 * @param boolean $consider_html If true, HTML tags would be handled correctly
 *
 * @return string Trimmed string.
 */
function truncateHtml($text, $length = 100, $ending = '...', $exact = false, $consider_html = true) {
  if ($consider_html) {
    // if the plain text is shorter than the maximum length, return the whole text
    if (strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {
      return $text;
    }
    // splits all html-tags to scanable lines
    preg_match_all('/(<.+?>)?([^<>]*)/s', $text, $lines, PREG_SET_ORDER);
    $total_length = strlen($ending);
    $open_tags = array();
    $truncate = '';
    foreach ($lines as $line_matchings) {
      // if there is any html-tag in this line, handle it and add it (uncounted) to the output
      if (!empty($line_matchings[1])) {
        // if it's an "empty element" with or without xhtml-conform closing slash
        if (preg_match('/^<(\s*.+?\/\s*|\s*(img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param)(\s.+?)?)>$/is', $line_matchings[1])) {
          // do nothing
        // if tag is a closing tag
        } else if (preg_match('/^<\s*\/([^\s]+?)\s*>$/s', $line_matchings[1], $tag_matchings)) {
          // delete tag from $open_tags list
          $pos = array_search($tag_matchings[1], $open_tags);
          if ($pos !== false) {
          unset($open_tags[$pos]);
          }
        // if tag is an opening tag
        } else if (preg_match('/^<\s*([^\s>!]+).*?>$/s', $line_matchings[1], $tag_matchings)) {
          // add tag to the beginning of $open_tags list
          array_unshift($open_tags, strtolower($tag_matchings[1]));
        }
        // add html-tag to $truncate'd text
        $truncate .= $line_matchings[1];
      }
      // calculate the length of the plain text part of the line; handle entities as one character
      $content_length = strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|[0-9a-f]{1,6};/i', ' ', $line_matchings[2]));
      if ($total_length+$content_length> $length) {
        // the number of characters which are left
        $left = $length - $total_length;
        $entities_length = 0;
        // search for html entities
        if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|[0-9a-f]{1,6};/i', $line_matchings[2], $entities, PREG_OFFSET_CAPTURE)) {
          // calculate the real length of all entities in the legal range
          foreach ($entities[0] as $entity) {
            if ($entity[1]+1-$entities_length <= $left) {
              $left--;
              $entities_length += strlen($entity[0]);
            } else {
              // no more characters left
              break;
            }
          }
        }
        $truncate .= substr($line_matchings[2], 0, $left+$entities_length);
        // maximum lenght is reached, so get off the loop
        break;
      } else {
        $truncate .= $line_matchings[2];
        $total_length += $content_length;
      }
      // if the maximum length is reached, get off the loop
      if($total_length>= $length) {
        break;
      }
    }
  } else {
    if (strlen($text) <= $length) {
      return $text;
    } else {
      $truncate = substr($text, 0, $length - strlen($ending));
    }
  }
  // if the words shouldn't be cut in the middle...
  if (!$exact) {
    // ...search the last occurance of a space...
    $spacepos = strrpos($truncate, ' ');
    if (isset($spacepos)) {
      // ...and cut the text in this position
      $truncate = substr($truncate, 0, $spacepos);
    }
  }
  // add the defined ending to the text
  $truncate .= $ending;
  if($consider_html) {
    // close all unclosed html-tags
    foreach ($open_tags as $tag) {
      $truncate .= '</' . $tag . '>';
    }
  }
  return $truncate;
}

// /**
//  * While processing an asset instance, we want to add in field instance overrides.
//  * We store that information here until we can pick it up in an alter hook.
//  * @return [type] [description]
//  */
// function exo_asset_field_storage_set($entity_type, $field_name, $bundle_name){
//   $data = &drupal_static(__FUNCTION__);
//   $data = array(
//     'entity_type' => $entity_type,
//     'field_name' => $field_name,
//     'bundle_name' => $bundle_name,
//   );
// }

// function exo_asset_field_storage_get(){
//   return drupal_static('exo_asset_field_storage_set');
// }

// function exo_asset_asset_instance_create_alter(&$instance){
//   if($storage = exo_asset_field_storage_get()){
//     $field_instance = field_info_instance($storage['entity_type'], $storage['field_name'], $storage['bundle_name']);
//     if(!empty($field_instance['settings']['exo']['settings']['assets'][$instance['type']]['instance_override'])){
//       $settings_override = $field_instance['settings']['exo']['settings']['assets'][$instance['type']];
//       if(!empty($settings_override['instances'])){
//         $active = asset_instance_get_active($instance['type']);
//         $data = array();
//         foreach($active as $instance_type => $settings){
//           if(empty($settings_override['instances'][$instance_type])) continue;
//           $handler = asset_instance_get_handler('instance', $instance_type);
//           $data += $handler->defaults($settings_override['instances'][$instance_type]);
//         }
//         $instance['data'] = array_merge($instance['data'],$data);
//       }
//     }
//   }
// }

/**
 * Preload assets into Javascript object
 */
function exo_asset_js_load($aid, $iid = 0){
  $asset = asset_load($aid);
  if(empty($asset->id)) return;
  $instance = asset_instance_load_with_type($iid, $asset->type);
  $view = exo_asset_render($asset, $instance, $view_mode = 'full');
  drupal_add_js(array('exoAssets' => array($aid . '-' . $iid => drupal_render($view))), 'setting');
  return $asset;
}


/**
 * Sets up content to show an individual asset
 * @todo - get rid of drupal_set_title();
 */
function exo_asset_render($asset, $instance, $view_mode = 'full') {
  $output = array();

  // We need to add the asset operations inside the entity markup. This flag
  // allows us to hit it later with exo_asset_preprocess_entity() and add in the
  // operations.
  $asset->preview = TRUE;

  $output['asset'] = asset_instance_render($asset, $instance);

  return $output;
}

/**
 * Preprocess asset entities
 */
function exo_asset_preprocess_entity(&$vars) {

  // Additional classes
  $vars['classes_array'][] = 'exo-asset-' .$vars['view_mode'];

  // Only run on assets in preview mode
  if(empty($vars['asset']) || empty($vars['asset']->instance) || empty($vars['asset']->preview)) return;

  $asset = $vars['asset'];

  $vars['attributes_array']['data-aid'] = $asset->id;
  $vars['attributes_array']['data-iid'] = $asset->instance->id;
  $vars['attributes_array']['data-widget'] = 'exo_asset';
  $vars['attributes_array']['data-cke-widget-keep-attr'] = '0';

  // $vars['attributes_array']['contentEditable'] = 'false';
  $vars['classes_array'][] = 'exo-asset';
  $vars['classes_array'][] = 'cke_widget_element';
}

/**
 * Implements exo_settings_form_alter().
 */
function exo_asset_exo_settings_form_alter(&$form, $defaults){
  $asset_types = asset_get_types();
  asort($asset_types);

  $form['assets'] = array(
    '#type' => 'item',
    '#title' => t('Assets'),
    '#tree' => TRUE,
    '#element_validate' => array('exo_asset_exo_settings_form_alter_validate')
  );
  foreach($asset_types as $bundle => $asset_type){

    $form['assets'][$bundle] = array(
      '#type' => 'container',
      '#tree' => TRUE,
    );

    $form['assets'][$bundle]['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => '<i class="fa fa-' . $asset_type->data['icon'] . '"></i> ' . $asset_type->label,
      '#default_value' => isset($defaults['assets'][$bundle]['enabled']) ? $defaults['assets'][$bundle]['enabled'] : 0,
    );

    // $form['settings']['assets'][$bundle]['placeholder'] = array(
    //   '#type' => 'checkbox',
    //   '#title' => '<i class="fa fa-minus-square-o"></i> ' . $asset_type->label . ' as placeholder when in edit mode',
    //   '#default_value' => isset($defaults['assets'][$bundle]['placeholder']) ? $defaults['assets'][$bundle]['placeholder'] : 0,
    //   '#field_prefix' => '<div style="float:left;">&nbsp;<i class="fa fa-caret-right"></i>&nbsp;</div>',
    // );
    // $form['settings']['assets'][$bundle]['placeholder']['#states'] = array(
    //   'visible' => array(
    //     ':input[name="instance[settings][exo][settings][assets]['.$bundle.'][enabled]"]' => array('checked' => TRUE),
    //   ),
    // );

    if(@is_array($asset_type->data['instances']) && !empty($asset_type->data['instances'])){
      $plugins = asset_instance_get_plugin('instance');

      $form['assets'][$bundle]['instance_override'] = array(
        '#type' => 'checkbox',
        '#title' => '<i class="fa fa-chain-broken"></i> ' . $asset_type->label . ' instance settings override',
        '#default_value' => isset($defaults['assets'][$bundle]['instance_override']) ? $defaults['assets'][$bundle]['instance_override'] : 0,
        '#field_prefix' => '<div style="float:left;">&nbsp;<i class="fa fa-caret-right"></i>&nbsp;</div>',
      );
      $form['assets'][$bundle]['instance_override']['#states'] = array(
        'visible' => array(
          ':input[name$="[assets]['.$bundle.'][enabled]"]' => array('checked' => TRUE),
        ),
      );

      $form['assets'][$bundle]['instances'] = array(
        '#tree' => TRUE,
        '#type' => 'fieldset',
        '#title' => t('Override instance options'),
        '#description' => t('An asset can have instance settings. These settings allow changes per asset on an individual implementation. This will override the defaults set on the asset type itself.') . '<hr /><br />',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE
      );
      $form['assets'][$bundle]['instances']['#states'] = array(
        'visible' => array(
          ':input[name$="[assets]['.$bundle.'][instance_override]"]' => array('checked' => TRUE),
        ),
      );
      foreach($asset_type->data['instances'] as $plugin => $settings){
        $parent_name = 'instance[settings][exo][settings][assets]['.$bundle.'][instances]';
        $settings_defaults = isset($defaults['assets'][$bundle]['instances']) ? (!empty($defaults['assets'][$bundle]['instances'][$plugin]) ? $defaults['assets'][$bundle]['instances'][$plugin] : 0) : $settings;
        asset_instance_settings_form($form['assets'][$bundle]['instances'], $form_state, $plugins[$plugin], $settings_defaults, $parent_name);

      }

    }
  }
}

/**
 * Form API validate callback for the type form.
 */
function exo_asset_exo_settings_form_alter_validate($element, &$form_state, $form) {
  $asset_types = asset_get_types();
  foreach($asset_types as $bundle => $asset_type){
    if(@is_array($form_state['values']['instance']['settings']['exo']['settings']['assets'][$bundle]['instances'])){
      $values = &$form_state['values']['instance']['settings']['exo']['settings']['assets'][$bundle]['instances'];
      $values = asset_instance_settings_values_cleanup($values);
    }
  }
}

/**
 * Implements exo_process_widget_alter().
 */
function exo_asset_exo_process_widget_alter(&$element, &$settings, $context){

  // Preload assets
  if(!empty($element['#default_value'])){
    $assets = asset_token_find($element['#default_value']);
    foreach($assets as $key => $data){
      exo_asset_js_load($data['aid'], $data['iid']);
    }
  }

  if(!empty($context['instance']['settings']['exo']['settings']['assets'])){
    $assets = $context['instance']['settings']['exo']['settings']['assets'];
    $plugins = array();
    foreach($assets as $asset => $data){
      if(!empty($data['enabled'])){
        $asset_type = asset_type_load($asset);
        $plugins[$asset] = (Object) array(
          'label' => $asset_type->data['plural'],
          'icon' => $asset_type->data['icon'],
        );
        $settings['sidebar'] = TRUE;
      }
      $settings['plugins']['exoAssets'] = (Object) array(
        'assets' => $plugins
      );
    }
  }
}

/**
 * Implements hook_exo_frame().
 */
function exo_asset_exo_frame(){
  drupal_add_js(drupal_get_path('module','exo_asset') . '/js/exo_asset.min.js', array('scope'=>'footer', 'weight'=>1010));
}

/**
 * Implements hook_views_pre_view().
 */
function exo_asset_views_pre_view(&$view, &$display_id, &$args) {
  if(
    strpos($view->name, 'assets_browser_') !== FALSE
    &&
    !empty($view->args[0])
    &&
    $view->args[0] == 'exo'
  ){
    $display = &$view->display_handler;
    // Show more results
    $display->options['pager']['type'] = 'mini';
    $display->options['pager']['options']['items_per_page'] = 16;
    // Swap out asset select for our own
    $display->options['fields']['exo_asset_select'] = $display->options['fields']['asset_select'];
    $display->options['fields']['exo_asset_select']['id'] = 'exo_asset_select';
    $display->options['fields']['exo_asset_select']['field'] = 'exo_asset_select';
    unset($display->options['fields']['asset_select']);
    // Change image style
    if(!empty($display->options['fields']['field_asset_image']['settings']['image_style'])){
      $display->options['fields']['field_asset_image']['settings']['image_style'] = 'exo-asset-thumb';
    }
  }
}

/**
 * AJAX tool for updating assets.
 */
function ajax_command_exo_asset_set() {
  return array(
    'command' => 'exoAssetSet',
  );
}

/**
 * AJAX tool for updating assets.
 */
function ajax_command_exo_asset_update($aid, $iid) {
  return array(
    'command' => 'exoAssetUpdate',
    'aid' => $aid,
    'iid' => $iid
  );
}
